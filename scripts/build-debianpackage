#!/bin/bash
# Wrapper script to build Debian packages for the SecureDrop Workstation.
# Requires a source tarball to build the package, defined via `PKG_PATH`.
# The script will check for a suitable tarball on an adjacent directory.
# Explicit configuration is available via the following env vars:
#
#   * PKG_PATH
#   * PKG_VERSION
#   * PKG_NAME
#
set -e
set -u
set -o pipefail

# Store root of repo, since we'll change dirs several times.
CUR_DIR="$(git rev-parse --show-toplevel)"

# Verify sha256sums.txt in the git repo
"${CUR_DIR}/scripts/verify-sha256sum-signature"

# Disable use of pip cache during debhelper build actions.
export DH_PIP_EXTRA_ARGS="--no-cache-dir --require-hashes"

# Declare general packaging building workspace; subdirs will
# be created within, to build specific packages.
TOP_BUILDDIR="$PWD/build/debbuild/packaging"
mkdir -p "$TOP_BUILDDIR"
rm -rf "${TOP_BUILDDIR:?}/${PKG_NAME}"
mkdir -p "${TOP_BUILDDIR}/${PKG_NAME}"
# Move changelog into place (we have separate changelogs for each platform)
PLATFORM="${PKG_PLATFORM:-buster}"

# Validate required args.
if [[ -z "${PKG_NAME:-}" ]]; then
    echo "Set PKG_NAME of the build";
    exit 1
fi


# Look up most recent release from GitHub repo
function find_latest_version() {
    repo_url="https://github.com/freedomofpress/${PKG_NAME}/tags"
    curl -s "$repo_url" \
        | perl -nE '$_ =~ m#/releases/tag/(v?[\d\.]+)\"# and say $1' \
        | head -n 1
}

if [[ -z "${PKG_VERSION:-}" ]]; then
    echo "PKG_VERSION not set, inferring from recent releases..."
    PKG_VERSION="$(find_latest_version)"
    if [[ -z "$PKG_VERSION" ]]; then
        echo "Failed to infer version"
        exit 1
    else
        echo "Using PKG_VERSION: $PKG_VERSION"
    fi
fi

# Legacy: copy over the debian directory (including new changelog) from repo
# if it exists
if [[ -d "$CUR_DIR/$PKG_NAME/" ]]; then
    echo "Copying over legacy debian/ directory for $PKG_NAME"
    cp -r "$CUR_DIR/$PKG_NAME/" "$TOP_BUILDDIR/"
fi

# Ensures that a given git tag is signed with the prod release key
# If "rc" is in the tag name, this will fail.
function verify_git_tag() {
    local d
    local t
    d="$1"
    t="$2"
    prod_fingerprint="2359E6538C0613E652955E6C188EDD3B7B22E6A3"
    if ! git -C "$d" tag --verify "$t" 2>&1 \
        | grep -q -F "using RSA key $prod_fingerprint" ; then
        echo "Failed to verify $t, not signed with $prod_fingerprint" >&2
        exit 2
    fi
}

# Clone and checkout the source
function setup_source_tree() {
    repo_url="https://github.com/freedomofpress/${PKG_NAME}"
    build_dir="/tmp/${PKG_NAME}"
    rm -rf "$build_dir"
    git clone "$repo_url" "$build_dir"

    if [[ -n "${PKG_GITREF:-}" ]]; then
        # Can't expect a prod sig on a gitref, likely a feature branch
        git -C "$build_dir" checkout "$PKG_GITREF"
    else
        # Verify tag, using only the prod key
        verify_git_tag "$build_dir" "$PKG_VERSION"
        # Tag is verified, proceed with checkout
        git -C "$build_dir" checkout "$PKG_VERSION"
    fi
}

# If the package is contained in the list, it should be a python package. In
# that case, we should extract tarball, and validate wheel hashes.
if [[ "${PKG_NAME}" =~ ^(securedrop-client|securedrop-proxy|securedrop-export|securedrop-log)$ ]]; then
    echo "${PKG_NAME} is a Python package"

    if [[ -z "${PKG_PATH:-}" ]]; then
        # Build from source
        echo "PKG_PATH not set, building from source (version $PKG_VERSION)..."
        setup_source_tree
        PKG_PATH="/tmp/${PKG_NAME}"
    fi


    # Copy the source tree to the packaging workspace
    cp -r "$PKG_PATH" "$TOP_BUILDDIR/"

    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"
    # Verify all the hashes from the verified sha256sums.txt
    "${CUR_DIR}/scripts/verify-hashes" "${CUR_DIR}/sha256sums.txt"

    echo "All hashes verified."
else
    echo "Package is a metapackage"
    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"
fi

printf "Building package '%s' from version '%s'...\\n" "$PKG_NAME" "$PKG_VERSION"

echo "$TOP_BUILDDIR/$PKG_NAME/"

# Legacy: Move platform-specific changelog into place
if [[ -f "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-$PLATFORM" ]]; then
    echo "Moving legacy $PLATFORM changelog into place"
    mv "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-$PLATFORM" "$TOP_BUILDDIR/$PKG_NAME/debian/changelog"
fi

# Adds reproducibility step
SOURCE_DATE_EPOCH="$(dpkg-parsechangelog -STimestamp)"
export SOURCE_DATE_EPOCH

# Build the package
dpkg-buildpackage -us -uc

# Tell the user the path of the files buillt
pkg_path="$(find "$TOP_BUILDDIR" -type f -iname "${PKG_NAME}_${PKG_VERSION}*.deb" | head -n1)"
if [[ -f "$pkg_path" ]]; then
    echo "Package location: $pkg_path"
else
    echo "Could not find package, look in $TOP_BUILDDIR"
fi
