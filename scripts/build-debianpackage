#!/bin/bash
# Wrapper script to build Debian packages for the SecureDrop Workstation.
# Requires a Git repository to build the package. The following environment
# variables control what the script does:
# * PKG_NAME (required): name of the package to build
# * SD_PKG_GITREF: Git ref to check out and build. If this matches the release tag
#                  format (X.Y.Z), it will be treated as a tag and expected to be signed
#                  with the production release key.
# * PKG_PATH: Path to a Git tree to build from
#
set -e
set -u
set -o pipefail


# Validate required args.
if [[ -z "${PKG_NAME:-}" ]]; then
    echo "Set PKG_NAME of the build";
    exit 1
fi

if [[ -z "${PKG_PATH:-}" ]]; then
    if  [[ -z "${SD_PKG_GITREF:-}" ]]; then
        echo "Set PKG_PATH or SD_PKG_GITREF";
        exit 1
    fi
fi

# Store root of repo, since we'll change dirs several times.
CUR_DIR="$(git rev-parse --show-toplevel)"
VERSION_CODENAME=$("${CUR_DIR}/scripts/codename")

# It is the callers' responsibility to ensure we are using the desired version
# securedrop-builder, however we double-check it for them as a failsafe.
if [[ -n "${SD_BUILDER_GITREF:-}" ]]; then
    if [[ $SD_BUILDER_GITREF != $(git rev-parse HEAD) ]]; then
        echo "Wrong version of securedrop-builder in use!"
        echo "Wanted: ${SD_BUILDER_GITREF}"
        echo "Currently using: $(git rev-parse HEAD)"
        exit 1
    fi
else
    SD_BUILDER_GITREF=$(git rev-parse HEAD)
fi

# Disable use of pip cache during debhelper build actions.
export DH_PIP_EXTRA_ARGS="--no-cache-dir --require-hashes"
# Point dh-virtualenv/pip to our prebuilt wheels
export WHEELS_DIR="${CUR_DIR}/${PKG_NAME}/wheels"

if [[ -d "${WHEELS_DIR}" ]]; then
    # Verify sha256sums.txt in the git repo if we have dependencies
    "${CUR_DIR}/scripts/verify-sha256sum-signature" "${PKG_NAME}"
fi

# Declare general packaging building workspace; subdirs will
# be created within, to build specific packages.
TOP_BUILDDIR="$PWD/build/debbuild/packaging"
mkdir -p "$TOP_BUILDDIR"
rm -rf "${TOP_BUILDDIR:?}/${PKG_NAME}"
mkdir -p "${TOP_BUILDDIR}/${PKG_NAME}"

# Ensures that a given git tag is signed with the prod release key
# If "rc" is in the tag name, this will fail.
function verify_git_tag() {
    local d
    local t
    d="$1"
    t="$2"
    echo "checking signature for tag $t" >&2
    prod_fingerprint="2359E6538C0613E652955E6C188EDD3B7B22E6A3"
    if ! git -C "$d" tag --verify "$t" 2>&1 \
        | grep -q -F "using RSA key $prod_fingerprint" ; then
        echo "Failed to verify $t, not signed with $prod_fingerprint" >&2
        exit 2
    fi
}

# Clone and checkout the source
function setup_source_tree() {
    repo_url="https://github.com/freedomofpress/${PKG_NAME}"
    build_dir="/tmp/${PKG_NAME}"
    rm -rf "$build_dir"
    git clone "$repo_url" "$build_dir"

    if [[ -n "${SD_PKG_GITREF:-}" ]]; then
        # if SD_PKG_GITREF looks like a release tag, check for a release signature
        [[ "$SD_PKG_GITREF" =~ ^(0|[1-9][0-9]*).(0|[1-9][0-9]*).(0|[1-9][0-9]*)$ ]] && verify_git_tag "$build_dir" "$SD_PKG_GITREF"
        git -C "$build_dir" checkout "$SD_PKG_GITREF"
    else
        echo "Neither PKG_PATH nor SD_PKG_GITREF were defined - please specify one" >&2
        exit 2
    fi
}

# If the package is contained in the list, it should be a python package. In
# that case, we should extract tarball, and validate wheel hashes.
if [[ "${PKG_NAME}" =~ ^(securedrop-client|securedrop-proxy|securedrop-export|securedrop-log)$ ]]; then
    echo "${PKG_NAME} is a Python package"

    if [[ -z "${PKG_PATH:-}" ]]; then
        # Build from source
        setup_source_tree
        PKG_PATH="/tmp/${PKG_NAME}/"
    else
        if [[ -f "${PKG_PATH}" ]]; then
            # It's a file and not a directory, must be a legacy tarball
            echo "Building from a tarball is no longer supported, it must be done from Git"
            exit 1
        fi
    fi
    # Store commit hash to be exported via buildinfo
    SD_PKG_GITREF=$(git -C "$PKG_PATH" rev-parse HEAD)

    # Copy the source tree to the packaging workspace
    cp -rT "$PKG_PATH" "$TOP_BUILDDIR/$PKG_NAME/"

    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"
    if [[ -d "${WHEELS_DIR}" ]]; then
        # Verify all the hashes from the verified sha256sums.txt if we have dependencies
        "${CUR_DIR}/scripts/verify-hashes" "${CUR_DIR}/${PKG_NAME}/sha256sums.txt"
    fi

    echo "All hashes verified."
else
    echo "Package is a metapackage"
    # Copy the source tree to the packaging workspace
    cp -r "$CUR_DIR/$PKG_NAME" "$TOP_BUILDDIR/"
    # Hop into the package build dir, to run dpkg-buildpackage
    cd "$TOP_BUILDDIR/$PKG_NAME/"
fi

# Legacy: copy over the debian directory from the packaging repo
# if one is not already in the tree
if [[ ! -d "debian/" ]]; then
    echo "Copying over legacy debian/ directory for $PKG_NAME"
    cp -r "$CUR_DIR/$PKG_NAME/debian" "debian"
fi

echo "$TOP_BUILDDIR/$PKG_NAME/"

# Legacy: Move platform-specific changelog into place
if [[ -f "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-$VERSION_CODENAME" ]]; then
    echo "Moving legacy $VERSION_CODENAME changelog into place"
    mv "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-$VERSION_CODENAME" "$TOP_BUILDDIR/$PKG_NAME/debian/changelog"
fi
if [[ ! -f "$TOP_BUILDDIR/$PKG_NAME/debian/changelog" ]]; then
    echo "Moving legacy buster changelog into place"
    mv "$TOP_BUILDDIR/$PKG_NAME/debian/changelog-buster" "$TOP_BUILDDIR/$PKG_NAME/debian/changelog"
fi

# Adjust platform in version number with sed magic to only replace the first instance
sed -i "0,/buster/s//${VERSION_CODENAME}/" debian/changelog

# Adds reproducibility step
SOURCE_DATE_EPOCH="$(dpkg-parsechangelog -STimestamp)"
export SOURCE_DATE_EPOCH

# Grab package version from changelog
CHANGELOG_VERSION=$(dpkg-parsechangelog --show-field Version)

# If SD_PKG_GITREF is set and is a release tag, check that it matches the version in debian/changelog
if [[ -n "${SD_PKG_GITREF:-}" ]] && [[ "${SD_PKG_GITREF:-}" =~ ^(0|[1-9][0-9]*).(0|[1-9][0-9]*).(0|[1-9][0-9]*)$ ]]; then
    if ! [[ "$SD_PKG_GITREF+$VERSION_CODENAME" == "$CHANGELOG_VERSION" ]]; then
        echo "Changelog version is $CHANGELOG_VERSION, but the provided tag is $SD_PKG_GITREF. Aborting build."
        exit 2
    fi
fi

# Build the package
printf "Building package '%s' with version '%s'...\\n" "$PKG_NAME" "$CHANGELOG_VERSION"
dpkg-buildpackage -us -uc

# Find the names of the build package and buildinfo file by reading d/files
pkg_path=$(grep '.deb' debian/files | awk '{print $1}')
buildinfo=$(grep '.buildinfo' debian/files | awk '{print $1}')

# Add in our extra metadata to buildinfo
echo " SD_BUILDER_GITREF=\"${SD_BUILDER_GITREF}\"" >> "${TOP_BUILDDIR}/${buildinfo}"
if [[ -n "${SD_PKG_GITREF:-}" ]]; then
    # packages that are fully in this repo won't have this set
    echo " SD_PKG_GITREF=\"${SD_PKG_GITREF}\"" >> "${TOP_BUILDDIR}/${buildinfo}"
fi
# Tell the user the path of the files built
echo "Package location: ${TOP_BUILDDIR}/${pkg_path}"
