#!/usr/bin/env python3

import os
import sys
import glob
import subprocess
import tempfile
import tarfile
import shutil
import argparse
from pprint import pprint


# Set SOURCE_DATE_EPOCH to a predictable value. Using the first
# commit to the SecureDrop project:
#
#   git show -s 62bbe590afd77a6af2dcaed46c93da6e0cf40951 --date=unix
#
# which yields 1309379017
os.environ["SOURCE_DATE_EPOCH"] = "1309379017"

# Force sane umask for reproducibility's sake.
os.umask(0o022)

# When building wheels, pip defaults to a safe dynamic tmpdir path.
# Some shared objects include the path from build, so we must make
# the path predictable across builds.
WHEEL_BUILD_DIR = "/tmp/pip-wheel-build"


def main():
    parser = argparse.ArgumentParser(
        description="Builds and caches sources and wheels"
    )
    parser.add_argument(
        "-p",
        help="Points to the project directory",
    )
    parser.add_argument(
        "--requirements", default="requirements.txt", help="requirements file name"
    )
    parser.add_argument(
        "--cache", default="./localwheels", help="Final cache dir"
    )
    parser.add_argument(
        "--clobber", action="store_true", default=False,
        help="Whether to overwrite wheels and source tarballs",
    )
    args = parser.parse_args()

    if args.p.startswith("https://"):
        git_clone_directory = tempfile.mkdtemp(prefix=os.path.basename(args.p))
        cmd = f"git clone {args.p} {git_clone_directory}".split()
        subprocess.check_call(cmd)
        args.p = git_clone_directory
    else:
        git_clone_directory = ""
        if not os.path.exists(args.p):
            print("Project directory missing {0}.".format(args.p))
            sys.exit(1)

    # Try requirements.txt in the repo root, otherwise try requirements/requirements.txt
    req_path = os.path.join(args.p, args.requirements)

    if not os.path.exists(req_path):
        req_path = os.path.join(args.p, "requirements/requirements.txt")

    if not os.path.exists(req_path):
        print("requirements.txt missing at {0}.".format(req_path))
        sys.exit(3)

    if os.path.exists(WHEEL_BUILD_DIR):
        shutil.rmtree(WHEEL_BUILD_DIR)
        os.mkdir(WHEEL_BUILD_DIR)
    else:
        os.mkdir(WHEEL_BUILD_DIR)

    with tempfile.TemporaryDirectory() as tmpdir:
        # The --require-hashes option will be used by default if there are
        # hashes in the requirements.txt file. We specify it anyway to guard
        # against use of a requirements.txt file without hashes.
        cmd = [
            "pip3",
            "download",
            "--no-binary",
            ":all:",
            "--require-hashes",
            "--dest",
            tmpdir,
            "--requirement",
            req_path,
        ]
        subprocess.check_call(cmd)

        # Now we have all the source tarballs
        source_tar_balls = glob.glob(f"{tmpdir}/*.tar.gz")
        for source in source_tar_balls:
            # I am getting umask issue for the below lines
            # tar = tarfile.open(source)
            # tar.extractall(WHEEL_BUILD_DIR)
            cmd = ["tar", "-xvf", source, "-C", WHEEL_BUILD_DIR]
            subprocess.check_call(cmd)
        # Now we have the all source tarballs extracted in WHEEL_BUILD_DIR

        # Next step is to take each one of those and then execute the build command to build a wheel against them
        project_names = os.listdir(WHEEL_BUILD_DIR)
        for project in project_names:
            print(f"Building {project}")
            source_path = os.path.join(WHEEL_BUILD_DIR, project)
            cmd = ["python3", "-m", "build", "--wheel", source_path, "--no-isolation", "-o", tmpdir]
            subprocess.check_call(cmd)
            print(f"build command used: {' '.join(cmd)}")


        # Now find the names
        names = os.listdir(tmpdir)

        cachenames = os.listdir(args.cache)

        for name in names:
            if name == "requirements.txt":  # We don't need this in cache
                continue
            if name in cachenames:  # Means all ready in our cache
                if not args.clobber:
                    continue

            # Else copy to cache
            filepath = os.path.join(tmpdir, name)
            shutil.copy(filepath, args.cache, follow_symlinks=True)
            print("Copying {0} to cache {1}".format(name, args.cache))

    if git_clone_directory:
        shutil.rmtree(git_clone_directory)


if __name__ == "__main__":
    main()
