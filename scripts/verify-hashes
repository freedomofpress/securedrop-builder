#!/usr/bin/env python3

import os
import sys

from pathlib import Path
import utils

try:
    import tomllib
except ImportError:
    # pre-Python 3.11 compatibility
    import tomli as tomllib

# For a requirements file in one of our projects, this script checks if we have at
# least one corresponding sha256sum (for the source tarball) for each dependency.
# The script should be run from the project directory whose requirements you
# want to parse.
#
# For now, both requirements.txt and poetry.lock/pyproject.toml are supported.
# Once Poetry support is stable across all components, requirements.txt support
# can be deprecated.

""""
Ensure that we have at least one signed SHA256 sum for each dependency declared
in a project's requirements file. This will be the source tarball.
"""
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./scripts/verify-hashes path/to/sha256sums.txt")
        sys.exit(1)

    sha256sum_data = {}
    with open(sys.argv[1]) as fobj:
        data = fobj.readlines()
    for line in data:
        line = line.strip()
        if line.startswith("#"):
            continue
        words = line.split()
        if len(words[0]) != 64:
            print(f"'{words[0]}' does not appear to be a sha256sum - exiting.")
            sys.exit(3)
        sha256sum_data[words[0]] = True

    if os.path.exists("poetry.lock") and os.path.exists("pyproject.toml"):
        dependencies = utils.get_poetry_hashes(Path('poetry.lock'), Path('pyproject.toml'))
    else:
        requirements_file = "requirements.txt"
        if not os.path.exists(requirements_file):
            requirements_file = "requirements/requirements.txt"
            if not os.path.exists(requirements_file):
                print(
                    "Cannot find poetry.lock/pyproject.toml or requirements.txt or requirements/requirements.txt"
                )
                sys.exit(1)

        dependencies = utils.get_requirements_file_hashes(Path(requirements_file))

    for dependency in dependencies.keys():
        found_a_hash = False
        for requirements_sha_256_hash in dependencies[dependency]:
            if requirements_sha_256_hash in sha256sum_data:
                found_a_hash = True
        if not found_a_hash:
            print(f"Missing sha256sum for package: {dependency} - exiting.")
            sys.exit(1)

    sys.exit(0)
