#!/usr/bin/env python3

# To update the requirements files with sha256sums from our local wheels.

import argparse
import os
import sys
import subprocess
from pathlib import Path

import utils

SKIP_PACKAGES = ["pyqt5", "sip", "colorama"]


def parse_args():
    # For backwards-compat
    if "PKG_DIR" in os.environ and not any(
        arg.startswith("--pkg-dir") for arg in sys.argv
    ):
        sys.argv.extend(["--pkg-dir", os.environ["PKG_DIR"]])
    parser = argparse.ArgumentParser(
        description="Update requirements files with sha256sums from our wheels"
    )
    parser.add_argument("--pkg-dir", help="Package directory", required=True)
    parser.add_argument("--project", help="Project to update")
    parser.add_argument(
        "--requirements",
        help="Directory that contains requirements.txt inside the package directory",
        default="requirements",
    )
    return parser.parse_args()


def main():
    args = parse_args()
    pkg_dir = Path(args.pkg_dir).expanduser()
    if args.project is not None:
        project_name = args.project
    else:
        project_name = utils.get_project_name(pkg_dir)
    requirements_file = pkg_dir / args.requirements / "requirements.txt"
    if not requirements_file.exists():
        poetry_lock = requirements_file.parent.parent / "poetry.lock"
        pyproject_toml = requirements_file.parent.parent / "pyproject.toml"
        if poetry_lock.exists() and pyproject_toml.exists():
            requirements_file = poetry_lock
        else:
            print("Could not find project requirements, checked:")
            print(f"* {requirements_file.absolute()}")
            print(f"* {poetry_lock.absolute()}")
            sys.exit(1)

    project = Path(__file__).parent.parent / project_name
    if requirements_file.name == "poetry.lock":
        dependencies = utils.get_poetry_names_and_versions(
            requirements_file, pyproject_toml
        )
    else:
        dependencies = utils.get_requirements_names_and_versions(requirements_file)

    dependencies = [dep for dep in dependencies if dep[0] not in SKIP_PACKAGES]

    verify_sha256sums_file(project)

    if (pkg_dir / args.requirements).exists():
        build_requirements_file = pkg_dir / args.requirements / "build-requirements.txt"
    else:
        # If there is no 'requirements' directory, we look in the project root
        build_requirements_file = pkg_dir / "build-requirements.txt"

    shasums_file = project / "sha256sums.txt"
    # Now let us update the files along with the sha256sums from local wheels
    add_sha256sums(build_requirements_file, dependencies, shasums_file, pkg_dir)


def verify_sha256sums_file(project: Path):
    """Verifies the sha256sums.txt file with gpg signature"""

    filename = project / "sha256sums.txt"
    signature_filename = project / "sha256sums.txt.asc"
    if not filename.exists():
        print(f"Missing {filename} file.")
        sys.exit(1)

    if not signature_filename.exists():
        print(f"Missing {signature_filename} file.")
        sys.exit(1)

    # Both file exists, we can now verify using gpg.
    # Using a wrapper script to ensure proper keyring.
    subprocess.check_call(["./scripts/verify-sha256sum-signature", project.name])


def add_sha256sums(
    path: Path, dependencies: list[(str, str)], shasums_file: Path, pkg_dir: Path
) -> None:
    """Adds all the required sha256sums to the wheels"""
    files = []

    lines = shasums_file.read_text().splitlines()

    for line in lines:
        line = line.strip()
        if line.startswith("#"):
            continue
        # Skip any sources
        if line.find(".whl") == -1:
            continue
        files.append(line.split())

    newlines = []
    missing_wheels = []

    # For each dependency in the requirements file
    for package_name, package_version in dependencies:
        wheel_name_prefix = "{}-{}".format(package_name, package_version)
        package_othername = "{}-{}".format(
            package_name.replace("-", "_"), package_version
        )

        line = ""
        for digest, name in files:
            lowername = name.lower()

            # Now check if a wheel is already available
            if lowername.startswith(wheel_name_prefix) or lowername.startswith(
                package_othername
            ):
                # Now add the hash to the line
                if line.find("--hash") == -1:
                    line = f"{package_name}=={package_version} --hash=sha256:{digest}"
                else:
                    # Means a second wheel hash
                    line += f" --hash=sha256:{digest}"

        line += "\n"
        newlines.append(line)
        if line.find("--hash") == -1:  # Missing wheel
            missing_wheels.append(f"{package_name}=={package_version}")

    # Do not update the file if missing wheels
    if missing_wheels:
        print("The following dependent wheel(s) are missing:")
        for missing_dep in missing_wheels:
            print("{}".format(missing_dep))

        print("\nPlease build the wheel by using the following command:\n")
        print(f"\tPKG_DIR={pkg_dir} make build-wheels\n")
        print("Then add the newly built wheels and sources to the wheels subdirectory")
        print("for the project. After these steps, please rerun the command again.")
        sys.exit(1)

    # Now update the file
    path.write_text("".join(newlines))
    print(f"Updated {path}")


if __name__ == "__main__":
    main()
