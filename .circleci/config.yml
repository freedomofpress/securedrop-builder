---
common-steps:
  - &persist
    persist_to_workspace:
      root: /tmp/workspace
      paths:
        - "*"

  - &installdeps
    run:
      name: Install Debian packaging dependencies
      command: |
        apt-get update && apt-get install -y make sudo
        make install-deps

  - &installserverdeps
    run:
      name: Install Debian packaging dependencies
      command: |
        apt-get update && apt-get install -y make sudo
        make install-server-deps

  - &installtestdeps
    run:
      name: Install test dependencies
      command: |
        apt-get install reprotest faketime -y --no-install-recommends
        .venv/bin/pip install -r test-requirements.txt

  - &getnightlyversion
    run:
      name: Create nightly version for python packages
      command: |
        cd ~/packaging/securedrop-*
        # Nightly versioning format is: LATEST_TAG-dev-YYMMDD-HHMMSS
        export VERSION_TO_BUILD="$(git describe --tags $(git rev-list --tags --max-count=1))-dev-$(date +%Y%m%d)-$(date +%H%M%S)"
        # Enable access to this env var in subsequent run steps
        echo $VERSION_TO_BUILD > ~/packaging/sd_version
        echo 'export VERSION_TO_BUILD=$(cat ~/packaging/sd_version)' >> $BASH_ENV
        ./update_version.sh $VERSION_TO_BUILD
        git tag $VERSION_TO_BUILD

  - &clonefromenv
    run:
      name: Clone the repository to be packaged
      command: |
        mkdir ~/packaging && cd ~/packaging
        git clone https://github.com/freedomofpress/${PKG_NAME}.git

  - &updatedebianchangelog
    run:
      name: Update debian changelog if nightly
      command: |
        cd ~/project/$PKG_NAME/debian
        export DEBFULLNAME='Automated builds'
        export DEBEMAIL=securedrop@freedom.press
        if [[ "$IS_NIGHTLY" == "nightly" ]]; then
            dch --changelog changelog-buster --distribution unstable --package "$PKG_NAME" --newversion $VERSION_TO_BUILD+buster "This is an automated build."
            echo "Bumped debian/changelog"
        fi

  - &builddebianpackage
    run:
      name: Build debian package
      command: |
        export VERSION_CODENAME=$(~/project/scripts/codename)
        export PKG_PATH=~/packaging/$PKG_NAME/
        export PKG_VERSION=$VERSION_TO_BUILD
        make $PKG_NAME
        ls ~/project/build/debbuild/packaging/*.deb
        mkdir -p /tmp/workspace/${VERSION_CODENAME}
        mv ~/project/build/debbuild/packaging/*.deb /tmp/workspace/${VERSION_CODENAME}

  - &addsshkeys
    add_ssh_keys:
      fingerprints:
        - "e5:b5:6e:d0:4e:ce:52:40:33:30:5e:6f:c5:73:38:20"

  - &setmetapackageversion
    run:
      name: Get and set metapackage version via distribution changelog
      command: |
        CURRENT_VERSION=$(grep -oP "\d+\.\d+\.\d+" ${PKG_NAME}/debian/changelog-buster | head -n1)
        if [[ "$IS_NIGHTLY" == "nightly" ]]; then
            # Nightly versioning format is: LATEST_TAG-dev-YYMMDD-HHMMSS
            export VERSION_TO_BUILD="$CURRENT_VERSION-dev-$(date +%Y%m%d)-$(date +%H%M%S)"
        else
            export VERSION_TO_BUILD="$CURRENT_VERSION"
        fi
        echo "Will build: $VERSION_TO_BUILD"
        # Enable access to this env var in subsequent run steps
        mkdir -p ~/packaging
        echo $VERSION_TO_BUILD > ~/packaging/sd_version
        echo 'export VERSION_TO_BUILD=$(cat ~/packaging/sd_version)' >> $BASH_ENV

  - &commitworkstationdebs
    run:
      name: Commit workstation debs for deployment to apt-test.freedom.press
      command: |
        apt-get update
        apt-get install -y ca-certificates git git-lfs openssh-client python3

        git clone git@github.com:freedomofpress/securedrop-dev-packages-lfs.git
        cd securedrop-dev-packages-lfs

        git config user.email "securedrop@freedom.press"
        git config user.name "sdcibot"

        # Copy built debian packages to the relevant workstation repo and git push.
        mkdir -p ./workstation/${CODENAME}-nightlies/
        cp /tmp/workspace/${CODENAME}/*.deb ./workstation/${CODENAME}-nightlies/ ||:
        git add workstation/${CODENAME}-nightlies/*.deb ||:

        # Clean up old nightlies too
        ~/project/scripts/clean-old-nightlies.py workstation/${CODENAME}-nightlies

        # If there are changes, diff-index will fail, so we commit and push
        git diff-index --quiet HEAD || git commit -m "Automated SecureDrop workstation build (${CODENAME})"

        git push origin main

version: 2.1

jobs:
  lint-and-test:
    docker:
      - image: debian:bullseye
    steps:
      - checkout
      - *installdeps
      - *installtestdeps
      - run:
          name: install test requirements, run linters, and run tests
          command: |
            make lint-desktop-files
            source .venv/bin/activate
            sed -i -re "292s/^(\s+).*\$/\1return _.prepend_to_build_command_raw('')/" /usr/lib/python3/dist-packages/reprotest/build.py
            make test

  reprotest-wheels-debian:
    docker:
      - image: debian:bullseye
    # Our "ci" user will have problems if the repository is in /root
    working_directory: "/srv"
    steps:
      - checkout
      - *installdeps
      - *installtestdeps
      - run: &reprotest_wheels_run
          name: install test requirements and run tests
          command: |
            adduser --system ci --ingroup root
            sed -i -re "292s/^(\s+).*\$/\1return _.prepend_to_build_command_raw('')/" /usr/lib/python3/dist-packages/reprotest/build.py
            # Have our "ci" user take over the git repo
            chown ci:root -R .
            sudo -u ci bash -c "source .venv/bin/activate && pytest -vvs tests/test_reproducible_wheels.py"

  reprotest-wheels-ubuntu:
    docker:
      - image: ubuntu:focal
    # Our "ci" user will have problems if the repository is in /root
    working_directory: "/srv"
    steps:
      - checkout
      - *installserverdeps
      - *installtestdeps
      - run: *reprotest_wheels_run

  reprotest-debs:
    docker:
      - image: debian:bullseye
    steps:
      - checkout
      - *installdeps
      - *installtestdeps
      - run:
          name: install test requirements and run tests
          command: |
            source .venv/bin/activate
            # Patch reprotest in-place to skip 'setarch' prefix, which fails under containers.
            # We cannot use Ubuntu 20.04 python3.8 to build Debian 10 python3.7 packages.
            sed -i -re "292s/^(\s+).*\$/\1return _.prepend_to_build_command_raw('')/" /usr/lib/python3/dist-packages/reprotest/build.py
            pytest -vvs tests/test_reproducible_debian_packages.py

  reprepro-update-tor:
    docker:
      - image: debian:bullseye
    steps:
      - checkout
      - *addsshkeys
      - run:
          name: clone and run reprepro update
          command: |
            apt-get update
            apt-get install -y reprepro ca-certificates dctrl-tools git git-lfs openssh-client

            # Clone the dev repo and configure it
            git clone git@github.com:freedomofpress/securedrop-dev-packages-lfs.git
            cd securedrop-dev-packages-lfs
            git lfs install
            git config user.email "securedrop@freedom.press"
            git config user.name "sdcibot"

            # Import the Tor repo signing key
            gpg --import repo/conf/updates-keys/*.gpg
            # Run reprepro update, skip export since we just want the debs (and we don't have
            # the repo signing key anyways)
            REPREPRO_BASE_DIR=repo reprepro --export=never update

            # Move the new packages over, intentionally leaving the old ones around
            mv repo/pool/main/t/tor/*.deb core/focal/
            git add core/focal/*.deb
            # If there are changes, diff-index will fail, so we commit and push
            git diff-index --quiet HEAD || git commit -m "Automatically updating Tor packages" && git push origin main


  build: &build
    parameters:
      package:
        type: string
      image:
        type: string
      nightly:
        type: string
        default: ""
    docker:
      - image: debian:<< parameters.image >>
    environment:
      PKG_NAME: << parameters.package >>
      SCHEDULE_NAME: << pipeline.schedule.name >>
      IS_NIGHTLY: << parameters.nightly >>
    steps:
      - checkout
      - *installdeps
      - *clonefromenv
      - *getnightlyversion
      - *updatedebianchangelog
      - *builddebianpackage
      - *persist

  build2: *build

  build-metapackage: &build-metapackage
    parameters:
      package:
        type: string
      image:
        type: string
      nightly:
        type: string
        default: ""
    environment:
      PKG_NAME: << parameters.package >>
      IS_NIGHTLY: << parameters.nightly >>
    docker:
      - image: debian:<< parameters.image >>
    steps:
      - checkout
      - *installdeps
      - *setmetapackageversion
      - *updatedebianchangelog
      - *builddebianpackage
      - *persist

  build2-metapackage: *build-metapackage

  push-bullseye: &push
    docker:
      - image: debian:bullseye
    environment:
      CODENAME: bullseye
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - *addsshkeys
      - *commitworkstationdebs

  push-bookworm:
    <<: *push
    environment:
      CODENAME: bookworm

workflows:
  build-packages:
    jobs:
      - lint-and-test
      - reprotest-wheels-debian
      - reprotest-wheels-ubuntu
      - reprotest-debs
      - build:
          matrix:
            parameters:
              package: &packages
                - securedrop-client
                - securedrop-export
                - securedrop-log
                - securedrop-proxy
              image:
                - bullseye
                - bookworm
      - build-metapackage:
          matrix:
            parameters:
              package: &metapackages
                - securedrop-keyring
                - securedrop-workstation-config
                - securedrop-workstation-viewer
              image:
                - bullseye
                - bookworm

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      # We need bullseye packages to be pushed if bookworm jobs fail.
      # So bookworm jobs run in a separate track ("build2") that is identical,
      # except the push-bullseye job only depends on the bullseye jobs and the
      # final step is push-bookworm, which might fail.
      - reprepro-update-tor
      - build:
          matrix:
            parameters:
              package: *packages
              image:
                - bullseye
              nightly: ["nightly"]
      - build2:
          matrix:
            parameters:
              package: *packages
              image:
                - bookworm
              nightly: ["nightly"]
      - build-metapackage:
          matrix:
            parameters:
              package: *metapackages
              image:
                - bullseye
              nightly: ["nightly"]
      - build2-metapackage:
          matrix:
            parameters:
              package: *metapackages
              image:
                - bookworm
              nightly: ["nightly"]
      - push-bullseye:
          requires:
            - reprepro-update-tor
            - build
            - build-metapackage
      # This should be last as we do expect it to fail occasionally.
      - push-bookworm:
          requires:
            - push-bullseye
            - build2
            - build2-metapackage
